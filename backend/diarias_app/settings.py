"""
Django settings for diarias_app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from dotenv import load_dotenv
from decouple import config
import os
import json

load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k03^fvp6*=4nl%6z!^jsznj-x8e=@z&am4q!1kg5u!)j*q75i7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

GOOGLE_CLIENT_ID = None
GOOGLE_CLIENT_SECRET = None

# tenta carregar credentials.json do root do projeto (mesmo local de manage.py)
CREDENTIALS_PATH = os.path.join(BASE_DIR, "credentials.json")
if os.path.exists(CREDENTIALS_PATH):
    try:
        with open(CREDENTIALS_PATH, "r", encoding="utf-8") as f:
            creds = json.load(f)
        # O JSON do Google pode ter a chave "web" (apps for web) ou "installed"
        google_cfg = creds.get("web") or creds.get("installed") or creds

        GOOGLE_CLIENT_ID = google_cfg.get("client_id")
        GOOGLE_CLIENT_SECRET = google_cfg.get("client_secret")

        if DEBUG:
            print(f"✅ carregado credentials.json: GOOGLE_CLIENT_ID={'***' if GOOGLE_CLIENT_ID else None}")
    except Exception as e:
        # Em DEV, apenas log para debug; não pare a aplicação
        if DEBUG:
            print(f"⚠️ falha ao ler {CREDENTIALS_PATH}: {e}")
else:
    if DEBUG:
        print(f"⚠️ {CREDENTIALS_PATH} não encontrado — tentando variáveis de ambiente (.env)")

if not GOOGLE_CLIENT_ID:
    GOOGLE_CLIENT_ID = (
        config('GOOGLE_CLIENT_ID', default=None)
        or os.environ.get('GOOGLE_CLIENT_ID')
        or config('GOOGLE_CLOUD_CLIENT_ID', default=None)
        or os.environ.get('GOOGLE_CLOUD_CLIENT_ID')
    )

if not GOOGLE_CLIENT_SECRET:
    GOOGLE_CLIENT_SECRET = (
        config('GOOGLE_CLIENT_SECRET', default=None)
        or os.environ.get('GOOGLE_CLIENT_SECRET')
        or config('GOOGLE_CLOUD_CLIENT_SECRET', default=None)
        or os.environ.get('GOOGLE_CLOUD_CLIENT_SECRET')
    )

# aviso de dev se não achar nada
if DEBUG and (not GOOGLE_CLIENT_ID or not GOOGLE_CLIENT_SECRET):
    print("⚠️ GOOGLE client credentials não configuradas. Coloque credentials.json na raiz do backend ou defina as variáveis de ambiente.")








# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'django.contrib.sites', # Requerido pelo allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # Provedor do Google
    'dj_rest_auth',
    'corsheaders',
    'dj_rest_auth.registration',

    # Nossos Apps (adicione estas linhas)
    'core.apps.CoreConfig',
    'common.apps.CommonConfig',
    'api.apps.ApiConfig',
]

SITE_ID = 1


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Configurações específicas do allauth
ACCOUNT_LOGIN_METHOD = 'email'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'none' # Para o nosso caso, não precisa de verificação de email

# Adiciona o adaptador de conta social que permite login sem a necessidade de um modelo de 'socialaccount' explícito
ACCOUNT_ADAPTER = 'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'
SOCIALACCOUNT_ADAPTER = 'allauth.socialaccount.adapter.DefaultSocialAccountAdapter'


# Configurações do Provedor Google
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
        },
        # Informa ao allauth para usar o fluxo de 'auth-code'
        'OAUTH_PKCE_ENABLED': True, 
    }
}

# Configurações do dj-rest-auth para usar JWT
REST_USE_JWT = True
JWT_AUTH_COOKIE = 'diarias-app-auth' # Nome do cookie para autenticação

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    "allauth.account.middleware.AccountMiddleware",
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
# Opcional: Se você precisar enviar cookies ou cabeçalhos de autorização
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'diarias_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'diarias_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'webmaster@localhost'

# Redirecionamentos básicos
LOGIN_REDIRECT_URL = '/'
ACCOUNT_ADAPTER = 'allauth.account.adapter.DefaultAccountAdapter'

# REST framework (autorizações / autenticação)
# settings.py (versão corrigida e robusta)

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'dj_rest_auth.jwt_auth.JWTAuthentication', # <-- Mude para autenticação JWT
        'rest_framework.authentication.SessionAuthentication',
    ),
}

# Caso queira timezone do Brasil
TIME_ZONE = 'America/Sao_Paulo'
USE_TZ = True


GOOGLE_MAPS_API_KEY = config('GOOGLE_MAPS_API_KEY', default=None)